import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

const NewProject = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    category: '3D Printing',
    difficulty: 'Beginner',
    estimatedCompletion: '',
    materials: [''],
    equipment: [''],
    tags: [''],
    isPublic: true,
    collaborators: [{ email: '', role: 'Project Owner' }]
  });

  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  const categories = ['3D Printing', 'Laser Cutting', 'Electronics', 'CNC', 'Woodworking', 'Textiles', 'Other'];
  const difficulties = ['Beginner', 'Intermediate', 'Advanced'];

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const handleArrayChange = (arrayName, index, value) => {
    setFormData(prev => ({
      ...prev,
      [arrayName]: prev[arrayName].map((item, i) => i === index ? value : item)
    }));
  };

  const handleCollaboratorChange = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      collaborators: prev.collaborators.map((collaborator, i) => 
        i === index ? { ...collaborator, [field]: value } : collaborator
      )
    }));
  };

  const addArrayItem = (arrayName) => {
    if (arrayName === 'collaborators') {
      setFormData(prev => ({
        ...prev,
        collaborators: [...prev.collaborators, { email: '', role: '' }]
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [arrayName]: [...prev[arrayName], '']
      }));
    }
  };

  const removeArrayItem = (arrayName, index) => {
    if (formData[arrayName].length > 1) {
      setFormData(prev => ({
        ...prev,
        [arrayName]: prev[arrayName].filter((_, i) => i !== index)
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.name.trim()) {
      newErrors.name = 'Project name is required';
    }
    
    if (!formData.description.trim()) {
      newErrors.description = 'Project description is required';
    }
    
    if (!formData.estimatedCompletion) {
      newErrors.estimatedCompletion = 'Estimated completion date is required';
    } else {
      const selectedDate = new Date(formData.estimatedCompletion);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (selectedDate < today) {
        newErrors.estimatedCompletion = 'Completion date must be in the future';
      }
    }
    
    // Validate materials (at least one non-empty)
    const validMaterials = formData.materials.filter(m => m.trim());
    if (validMaterials.length === 0) {
      newErrors.materials = 'At least one material is required';
    }
    
    // Validate equipment (at least one non-empty)
    const validEquipment = formData.equipment.filter(e => e.trim());
    if (validEquipment.length === 0) {
      newErrors.equipment = 'At least one piece of equipment is required';
    }
    
    // Validate tags (at least one non-empty)
    const validTags = formData.tags.filter(t => t.trim());
    if (validTags.length === 0) {
      newErrors.tags = 'At least one tag is required';
    }
    
    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const newErrors = validateForm();
    
    if (Object.keys(newErrors).length === 0) {
      setIsLoading(true);
      
      try {
        // Clean up arrays by removing empty strings
        const cleanFormData = {
          ...formData,
          materials: formData.materials.filter(m => m.trim()),
          equipment: formData.equipment.filter(e => e.trim()),
          tags: formData.tags.filter(t => t.trim()),
          collaborators: formData.collaborators.filter(c => c.trim()),
          createdDate: new Date().toISOString().split('T')[0],
          lastUpdated: new Date().toISOString().split('T')[0],
          status: 'Planning',
          progress: 0,
          id: Date.now() // In real app, this would be generated by backend
        };
        
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 2000));
        console.log('New project created:', cleanFormData);
        
        // Navigate back to projects page
        navigate('/projects', {
          state: {
            message: 'Project created successfully!',
            newProject: cleanFormData
          }
        });
        
      } catch (error) {
        setErrors({ submit: 'Failed to create project. Please try again.' });
      } finally {
        setIsLoading(false);
      }
    } else {
      setErrors(newErrors);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
      {/* Header */}
      <header className="tech-card m-4 mb-6">
        <div className="flex items-center justify-between p-6">
          <div className="flex items-center gap-4">
            <button 
              type="button"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Back to Projects clicked!');
                navigate('/projects');
              }}
              className="text-slate-400 hover:text-slate-200 transition-colors bg-transparent border-none p-2 cursor-pointer"
              style={{ zIndex: 10 }}
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <div>
              <h1 className="text-2xl font-bold text-slate-100">Create New Project</h1>
              <p className="text-slate-400">Start your next fab lab creation</p>
            </div>
          </div>
        </div>
      </header>

      <div className="mx-4 max-w-4xl mx-auto">
        <form onSubmit={handleSubmit} className="tech-card p-8 space-y-8">
          {/* Basic Information */}
          <div>
            <h2 className="text-xl font-bold text-slate-100 mb-6">Basic Information</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Project Name */}
              <div className="md:col-span-2">
                <label htmlFor="name" className="block text-slate-300 text-sm font-medium mb-2">
                  Project Name *
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  className={`input-tech ${errors.name ? 'border-red-500 focus:border-red-500 focus:ring-red-500/20' : ''}`}
                  placeholder="Enter your project name"
                />
                {errors.name && <p className="error-message">{errors.name}</p>}
              </div>

              {/* Category */}
              <div>
                <label htmlFor="category" className="block text-slate-300 text-sm font-medium mb-2">
                  Category *
                </label>
                <select
                  id="category"
                  name="category"
                  value={formData.category}
                  onChange={handleChange}
                  className="tech-select"
                >
                  {categories.map(category => (
                    <option key={category} value={category}>{category}</option>
                  ))}
                </select>
              </div>

              {/* Difficulty */}
              <div>
                <label htmlFor="difficulty" className="block text-slate-300 text-sm font-medium mb-2">
                  Difficulty Level *
                </label>
                <select
                  id="difficulty"
                  name="difficulty"
                  value={formData.difficulty}
                  onChange={handleChange}
                  className="tech-select"
                >
                  {difficulties.map(difficulty => (
                    <option key={difficulty} value={difficulty}>{difficulty}</option>
                  ))}
                </select>
              </div>

              {/* Estimated Completion */}
              <div>
                <label htmlFor="estimatedCompletion" className="block text-slate-300 text-sm font-medium mb-2">
                  Estimated Completion Date *
                </label>
                <input
                  type="date"
                  id="estimatedCompletion"
                  name="estimatedCompletion"
                  value={formData.estimatedCompletion}
                  onChange={handleChange}
                  min={new Date().toISOString().split('T')[0]}
                  className={`input-tech ${errors.estimatedCompletion ? 'border-red-500 focus:border-red-500 focus:ring-red-500/20' : ''}`}
                />
                {errors.estimatedCompletion && <p className="error-message">{errors.estimatedCompletion}</p>}
              </div>

              {/* Public/Private */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="isPublic"
                  name="isPublic"
                  checked={formData.isPublic}
                  onChange={handleChange}
                  className="tech-checkbox"
                />
                <label htmlFor="isPublic" className="ml-3 text-slate-300">
                  Make this project public (visible to other lab members)
                </label>
              </div>
            </div>

            {/* Description */}
            <div className="mt-6">
              <label htmlFor="description" className="block text-slate-300 text-sm font-medium mb-2">
                Project Description *
              </label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleChange}
                rows="4"
                className={`input-tech ${errors.description ? 'border-red-500 focus:border-red-500 focus:ring-red-500/20' : ''}`}
                placeholder="Describe your project, its goals, and what you plan to create..."
              />
              {errors.description && <p className="error-message">{errors.description}</p>}
            </div>
          </div>

          {/* Materials */}
          <div>
            <h2 className="text-xl font-bold text-slate-100 mb-6">Materials Required</h2>
            <div className="space-y-3">
              {formData.materials.map((material, index) => (
                <div key={index} className="flex gap-3">
                  <input
                    type="text"
                    value={material}
                    onChange={(e) => handleArrayChange('materials', index, e.target.value)}
                    className="input-tech flex-1"
                    placeholder="Enter material name (e.g., PLA Filament, 3mm Plywood)"
                  />
                  {formData.materials.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeArrayItem('materials', index)}
                      className="p-3 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-xl transition-colors"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  )}
                </div>
              ))}
              <div 
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  console.log('Add Material clicked!');
                  addArrayItem('materials');
                }}
                className="flex items-center gap-2 text-blue-400 hover:text-blue-300 transition-colors cursor-pointer p-3 rounded-xl border border-blue-400/20 hover:bg-blue-500/10 relative tech-card"
                style={{ userSelect: 'none', zIndex: 50 }}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Add Material
              </div>
              {errors.materials && <p className="error-message">{errors.materials}</p>}
            </div>
          </div>

          {/* Equipment */}
          <div>
            <h2 className="text-xl font-bold text-slate-100 mb-6">Equipment Needed</h2>
            <div className="space-y-3">
              {formData.equipment.map((item, index) => (
                <div key={index} className="flex gap-3">
                  <input
                    type="text"
                    value={item}
                    onChange={(e) => handleArrayChange('equipment', index, e.target.value)}
                    className="input-tech flex-1"
                    placeholder="Enter equipment name (e.g., 3D Printer, Laser Cutter)"
                  />
                  {formData.equipment.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeArrayItem('equipment', index)}
                      className="p-3 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-xl transition-colors"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  )}
                </div>
              ))}
              <div 
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  console.log('Add Equipment clicked!');
                  addArrayItem('equipment');
                }}
                className="flex items-center gap-2 text-blue-400 hover:text-blue-300 transition-colors cursor-pointer p-3 rounded-xl border border-blue-400/20 hover:bg-blue-500/10 relative tech-card"
                style={{ userSelect: 'none', zIndex: 50 }}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Add Equipment
              </div>
              {errors.equipment && <p className="error-message">{errors.equipment}</p>}
            </div>
          </div>

          {/* Tags */}
          <div>
            <h2 className="text-xl font-bold text-slate-100 mb-6">Tags</h2>
            <div className="space-y-3">
              {formData.tags.map((tag, index) => (
                <div key={index} className="flex gap-3">
                  <input
                    type="text"
                    value={tag}
                    onChange={(e) => handleArrayChange('tags', index, e.target.value)}
                    className="input-tech flex-1"
                    placeholder="Enter tag (e.g., Arduino, IoT, Beginner-friendly)"
                  />
                  {formData.tags.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeArrayItem('tags', index)}
                      className="p-3 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-xl transition-colors"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  )}
                </div>
              ))}
              <div 
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  console.log('Add Tag clicked!');
                  addArrayItem('tags');
                }}
                className="flex items-center gap-2 text-blue-400 hover:text-blue-300 transition-colors cursor-pointer p-3 rounded-xl border border-blue-400/20 hover:bg-blue-500/10 relative tech-card"
                style={{ userSelect: 'none', zIndex: 50 }}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Add Tag
              </div>
              {errors.tags && <p className="error-message">{errors.tags}</p>}
            </div>
          </div>

          {/* Collaborators */}
          <div>
            <h2 className="text-xl font-bold text-slate-100 mb-6">Team Collaborators</h2>
            <div className="space-y-4">
              {formData.collaborators.map((collaborator, index) => (
                <div key={index} className="p-4 border border-slate-700/50 rounded-xl bg-slate-800/30">
                  <div className="flex items-center gap-2 mb-3">
                    <svg className="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    <span className="text-slate-300 font-medium">
                      {index === 0 ? 'Project Owner' : `Collaborator ${index}`}
                    </span>
                    {index === 0 && (
                      <span className="px-2 py-1 bg-blue-500/20 text-blue-300 text-xs rounded">Owner</span>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {/* Email Field */}
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg className="w-4 h-4 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                        </svg>
                      </div>
                      <input
                        type="email"
                        value={collaborator.email}
                        onChange={(e) => handleCollaboratorChange(index, 'email', e.target.value)}
                        placeholder={index === 0 ? "your@email.com (Project Owner)" : "collaborator@email.com"}
                        className="input-tech text-sm"
                      />
                    </div>

                    {/* Role Field */}
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg className="w-4 h-4 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 00-2 2H6a2 2 0 00-2-2V6m16 0v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6a2 2 0 012-2h16a2 2 0 012 2z" />
                        </svg>
                      </div>
                      <input
                        type="text"
                        value={collaborator.role}
                        onChange={(e) => handleCollaboratorChange(index, 'role', e.target.value)}
                        placeholder={index === 0 ? "Project Owner" : "e.g., Hardware, Software, Design, etc."}
                        className="input-tech text-sm"
                        disabled={index === 0}
                      />
                    </div>
                  </div>

                  {/* Remove Button - Only for non-owners */}
                  {index > 0 && (
                    <div className="flex justify-end mt-3">
                      <button
                        type="button"
                        onClick={() => removeArrayItem('collaborators', index)}
                        className="flex items-center gap-1 text-red-400 hover:text-red-300 text-sm transition-colors"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Remove Collaborator
                      </button>
                    </div>
                  )}
                </div>
              ))}
              <div 
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  console.log('Add Collaborator clicked!');
                  addArrayItem('collaborators');
                }}
                className="flex items-center gap-2 text-purple-400 hover:text-purple-300 transition-colors cursor-pointer p-3 rounded-xl border border-purple-400/20 hover:bg-purple-500/10 relative tech-card"
                style={{ userSelect: 'none', zIndex: 50 }}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Add Collaborator
              </div>
              {errors.collaborators && <p className="error-message">{errors.collaborators}</p>}
            </div>
          </div>

          {/* Submit Buttons */}
          <div className="flex gap-4 pt-6 border-t border-slate-700/50">
            <Link to="/projects" className="btn-tech-secondary px-6 py-3">
              Cancel
            </Link>
            <button
              type="submit"
              disabled={isLoading}
              className={`btn-tech-primary px-12 py-3 flex-1 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              {isLoading ? (
                <div className="flex items-center justify-center gap-2">
                  <div className="w-5 h-5 border-2 border-white/20 border-t-white rounded-full animate-spin"></div>
                  <span>Creating Project...</span>
                </div>
              ) : (
                <div className="flex items-center justify-center gap-2">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  <span>Create Project</span>
                </div>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default NewProject;